{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\n\nvar _a = require('ethereum-cryptography/keccak'),\n    keccak224 = _a.keccak224,\n    keccak384 = _a.keccak384,\n    k256 = _a.keccak256,\n    keccak512 = _a.keccak512;\n\nvar createHash = require('create-hash');\n\nvar ethjsUtil = require('ethjs-util');\n\nvar rlp = require(\"rlp\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n\n  if (!bits) bits = 256;\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n\n    case 256:\n      {\n        return k256(a);\n      }\n\n    case 384:\n      {\n        return keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\n\n\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"mappings":";;;;;;;AAAM,SAAuDA,OAAO,CAAC,8BAAD,CAA9D;AAAA,IAAEC,SAAS,eAAX;AAAA,IAAaC,SAAS,eAAtB;AAAA,IAAmCC,IAAI,eAAvC;AAAA,IAAyCC,SAAS,eAAlD;;AACN,IAAMC,UAAU,GAAGL,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAC,YAAD,CAAzB;;AACA;;AACA;AAEA;;;;;;;;AAMaO,iBAAS,UAASC,CAAT,EAAiBC,IAAjB,EAAmC;AAAlB;AAAAA;AAAkB;;AACvD,MAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,CAACF,SAAS,CAACI,WAAV,CAAsBF,CAAtB,CAA9B,EAAwD;AACtDA,KAAC,GAAGG,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAe,MAAf,CAAJ;AACD,GAFD,MAEO;AACLA,KAAC,GAAGK,iBAASL,CAAT,CAAJ;AACD;;AAED,MAAI,CAACC,IAAL,EAAWA,IAAI,GAAG,GAAP;;AAEX,UAAQA,IAAR;AACE,SAAK,GAAL;AAAU;AACR,eAAOR,SAAS,CAACO,CAAD,CAAhB;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAOL,IAAI,CAACK,CAAD,CAAX;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAON,SAAS,CAACM,CAAD,CAAhB;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAOJ,SAAS,CAACI,CAAD,CAAhB;AACD;;AACD;AAAS;AACP,cAAM,IAAIM,KAAJ,CAAU,6BAA2BL,IAArC,CAAN;AACD;AAfH;AAiBD,CA1BY;AA4Bb;;;;;;AAIaF,oBAAY,UAASC,CAAT,EAAe;AACtC,SAAOD,eAAOC,CAAP,CAAP;AACD,CAFY;AAIb;;;;;;AAIaD,iBAAS,UAASC,CAAT,EAAe;AACnCA,GAAC,GAAGK,iBAASL,CAAT,CAAJ;AACA,SAAOH,UAAU,CAAC,QAAD,CAAV,CACJU,MADI,CACGP,CADH,EAEJQ,MAFI,EAAP;AAGD,CALY;AAOb;;;;;;;AAKaT,oBAAY,UAASC,CAAT,EAAiBS,MAAjB,EAAgC;AACvDT,GAAC,GAAGK,iBAASL,CAAT,CAAJ;AACA,MAAMU,IAAI,GAAGb,UAAU,CAAC,QAAD,CAAV,CACVU,MADU,CACHP,CADG,EAEVQ,MAFU,EAAb;;AAGA,MAAIC,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAOJ,kBAAUK,IAAV,EAAgB,EAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAP;AACD;AACF,CAVY;AAYb;;;;;;AAIaX,kBAAU,UAASC,CAAT,EAAqB;AAC1C,SAAOD,eAAOY,GAAG,CAACC,MAAJ,CAAWZ,CAAX,CAAP,CAAP;AACD,CAFY","names":["require","keccak224","keccak384","k256","keccak512","createHash","ethjsUtil","exports","a","bits","isHexString","Buffer","from","bytes_1","Error","update","digest","padded","hash","rlp","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}