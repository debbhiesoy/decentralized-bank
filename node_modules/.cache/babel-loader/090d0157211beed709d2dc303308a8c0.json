{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\n\nvar buffer_1 = require(\"buffer\"); // secp256k1n/2\n\n\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\n\nvar Transaction =\n/** @class */\nfunction () {\n  /**\n   * Creates a new transaction from an object with its fields' values.\n   *\n   * @param data - A transaction can be initialized with its rlp representation, an array containing\n   * the value of its fields in order, or an object containing them by name.\n   *\n   * @param opts - The transaction's options, used to indicate the chain and hardfork the\n   * transactions belongs to.\n   *\n   * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\n   * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\n   * Dragon.)\n   *\n   * @example\n   * ```js\n   * const txData = {\n   *   nonce: '0x00',\n   *   gasPrice: '0x09184e72a000',\n   *   gasLimit: '0x2710',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: '0x00',\n   *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n   *   v: '0x1c',\n   *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n   *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n   * };\n   * const tx = new Transaction(txData);\n   * ```\n   */\n  function Transaction(data, opts) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    } // instantiate Common class instance based on passed options\n\n\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\n      }\n\n      this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      this._common = new ethereumjs_common_1.default(chain, hardfork);\n    } // Define Properties\n\n\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }]; // attached serialize\n\n    ethereumjs_util_1.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    this._validateV(this.v);\n\n    this._overrideVSetterWithValidation();\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to.toString('hex') === '';\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param includeSignature - Whether or not to include the signature\n   */\n\n\n  Transaction.prototype.hash = function (includeSignature) {\n    if (includeSignature === void 0) {\n      includeSignature = true;\n    }\n\n    var items;\n\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._implementsEIP155()) {\n        items = this.raw.slice(0, 6).concat([ethereumjs_util_1.toBuffer(this.getChainId()), // TODO: stripping zeros should probably be a responsibility of the rlp module\n        ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]);\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    } // create hash\n\n\n    return ethereumjs_util_1.rlphash(items);\n  };\n  /**\n   * returns chain ID\n   */\n\n\n  Transaction.prototype.getChainId = function () {\n    return this._common.chainId();\n  };\n  /**\n   * returns the sender's address\n   */\n\n\n  Transaction.prototype.getSenderAddress = function () {\n    if (this._from) {\n      return this._from;\n    }\n\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethereumjs_util_1.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\n   * returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    if (!this.verifySignature()) {\n      throw new Error('Invalid Signature');\n    } // If the signature was verified successfully the _senderPubKey field is defined\n\n\n    return this._senderPubKey;\n  };\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  Transaction.prototype.verifySignature = function () {\n    var msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethereumjs_util_1.bufferToInt(this.v);\n\n      var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\n\n      this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n  /**\n   * sign a transaction with a given private key\n   * @param privateKey - Must be 32 bytes in length\n   */\n\n\n  Transaction.prototype.sign = function (privateKey) {\n    // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\n    // different results if this tx was already signed.\n    this.v = new buffer_1.Buffer([]);\n    this.s = new buffer_1.Buffer([]);\n    this.r = new buffer_1.Buffer([]);\n    var msgHash = this.hash(false);\n    var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n\n    if (this._implementsEIP155()) {\n      sig.v += this.getChainId() * 2 + 8;\n    }\n\n    Object.assign(this, sig);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    var data = this.raw[5];\n    var cost = new ethereumjs_util_1.BN(0);\n\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(this._common.param('gasPrices', 'txDataZero')) : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\n    }\n\n    return cost;\n  };\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\n\n    if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this._common.param('gasPrices', 'txCreation'));\n    }\n\n    return fee;\n  };\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\n  };\n\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\n      errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\n    }\n\n    if (stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n  /**\n   * Returns the rlp encoding of the transaction\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    // Note: This never gets executed, defineProperties overwrites it.\n    return ethereumjs_util_1.rlp.encode(this.raw);\n  };\n  /**\n   * Returns the transaction in JSON format\n   * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\n   */\n\n\n  Transaction.prototype.toJSON = function (labels) {\n    if (labels === void 0) {\n      labels = false;\n    } // Note: This never gets executed, defineProperties overwrites it.\n\n\n    return {};\n  };\n\n  Transaction.prototype._validateV = function (v) {\n    if (v === undefined || v.length === 0) {\n      return;\n    }\n\n    if (!this._common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n\n    var vInt = ethereumjs_util_1.bufferToInt(v);\n\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n\n  Transaction.prototype._isSigned = function () {\n    return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\n  };\n\n  Transaction.prototype._overrideVSetterWithValidation = function () {\n    var _this = this;\n\n    var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\n    Object.defineProperty(this, 'v', __assign({}, vDescriptor, {\n      set: function set(v) {\n        if (v !== undefined) {\n          _this._validateV(ethereumjs_util_1.toBuffer(v));\n        }\n\n        vDescriptor.set(v);\n      }\n    }));\n  };\n\n  Transaction.prototype._implementsEIP155 = function () {\n    var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\n\n    if (!this._isSigned()) {\n      // We sign with EIP155 all unsigned transactions after spuriousDragon\n      return onEIP155BlockOrLater;\n    } // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\n    // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\n    // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\n    // CHAIN_ID, r = 0 and s = 0.\n\n\n    var v = ethereumjs_util_1.bufferToInt(this.v);\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  return Transaction;\n}();\n\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["N_DIV_2","ethereumjs_util_1","data","opts","common","chain","hardfork","Error","_common","ethereumjs_common_1","fields","name","length","allowLess","default","buffer_1","alias","allowZero","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","_validateV","v","_overrideVSetterWithValidation","Transaction","to","toString","includeSignature","items","raw","_implementsEIP155","slice","concat","getChainId","chainId","_from","pubkey","getSenderPublicKey","verifySignature","_senderPubKey","msgHash","hash","gteHardfork","s","cmp","useChainIdWhileRecoveringPubKey","r","undefined","e","privateKey","sig","assign","cost","i","iaddn","param","fee","getDataFee","toCreationAddress","gasLimit","imul","gasPrice","iadd","value","stringError","errors","push","getBaseFee","join","encode","labels","vInt","isValidEIP155V","vDescriptor","getOwnPropertyDescriptor","__assign","set","_this","onEIP155BlockOrLater","_isSigned","vAndChainIdMeetEIP155Conditions"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}