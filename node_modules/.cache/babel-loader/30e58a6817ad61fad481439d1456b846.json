{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2018\n */\nvar _ = require('underscore');\n\nvar utils = require('web3-utils');\n\nvar EthersAbi = require('ethers/utils/abi-coder').AbiCoder;\n\nvar ethersAbiCoder = new EthersAbi(function (type, value) {\n  if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n    return value.toString();\n  }\n\n  return value;\n}); // result method\n\nfunction Result() {}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\n\n\nvar ABICoder = function ABICoder() {};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\n\n\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n  if (_.isObject(functionName)) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n\n  return utils.sha3(functionName).slice(0, 10);\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\n\n\nABICoder.prototype.encodeEventSignature = function (functionName) {\n  if (_.isObject(functionName)) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n\n  return utils.sha3(functionName);\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n *\n * @param {String|Object} type\n * @param {any} param\n *\n * @return {String} encoded plain param\n */\n\n\nABICoder.prototype.encodeParameter = function (type, param) {\n  return this.encodeParameters([type], [param]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n *\n * @param {Array<String|Object>} types\n * @param {Array<any>} params\n *\n * @return {String} encoded list of params\n */\n\n\nABICoder.prototype.encodeParameters = function (types, params) {\n  return ethersAbiCoder.encode(this.mapTypes(types), params.map(function (param) {\n    if (utils.isBN(param) || utils.isBigNumber(param)) {\n      return param.toString(10);\n    }\n\n    return param;\n  }));\n};\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\n\n\nABICoder.prototype.mapTypes = function (types) {\n  var self = this;\n  var mappedTypes = [];\n  types.forEach(function (type) {\n    if (self.isSimplifiedStructFormat(type)) {\n      var structName = Object.keys(type)[0];\n      mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n        components: self.mapStructToCoderFormat(type[structName])\n      }));\n      return;\n    }\n\n    mappedTypes.push(type);\n  });\n  return mappedTypes;\n};\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\n\n\nABICoder.prototype.isSimplifiedStructFormat = function (type) {\n  return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n};\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\n\n\nABICoder.prototype.mapStructNameAndType = function (structName) {\n  var type = 'tuple';\n\n  if (structName.indexOf('[]') > -1) {\n    type = 'tuple[]';\n    structName = structName.slice(0, -2);\n  }\n\n  return {\n    type: type,\n    name: structName\n  };\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\n\n\nABICoder.prototype.mapStructToCoderFormat = function (struct) {\n  var self = this;\n  var components = [];\n  Object.keys(struct).forEach(function (key) {\n    if (typeof struct[key] === 'object') {\n      components.push(Object.assign(self.mapStructNameAndType(key), {\n        components: self.mapStructToCoderFormat(struct[key])\n      }));\n      return;\n    }\n\n    components.push({\n      name: key,\n      type: struct[key]\n    });\n  });\n  return components;\n};\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\n\n\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n  return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\n\n\nABICoder.prototype.decodeParameter = function (type, bytes) {\n  return this.decodeParameters([type], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\n\n\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n  if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n    throw new Error('Returned values aren\\'t valid, did it run Out of Gas? ' + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');\n  }\n\n  var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''));\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  outputs.forEach(function (output, i) {\n    var decodedValue = res[returnValue.__length__];\n    decodedValue = decodedValue === '0x' ? null : decodedValue;\n    returnValue[i] = decodedValue;\n\n    if (_.isObject(output) && output.name) {\n      returnValue[output.name] = decodedValue;\n    }\n\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\n\n\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n  var _this = this;\n\n  topics = _.isArray(topics) ? topics : [topics];\n  data = data || '';\n  var notIndexedInputs = [];\n  var indexedParams = [];\n  var topicCount = 0; // TODO check for anonymous logs?\n\n  inputs.forEach(function (input, i) {\n    if (input.indexed) {\n      indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n        return input.type.indexOf(staticType) !== -1;\n      }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n      topicCount++;\n    } else {\n      notIndexedInputs[i] = input;\n    }\n  });\n  var nonIndexedData = data;\n  var notIndexedParams = nonIndexedData ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  inputs.forEach(function (res, i) {\n    returnValue[i] = res.type === 'string' ? '' : null;\n\n    if (typeof notIndexedParams[i] !== 'undefined') {\n      returnValue[i] = notIndexedParams[i];\n    }\n\n    if (typeof indexedParams[i] !== 'undefined') {\n      returnValue[i] = indexedParams[i];\n    }\n\n    if (res.name) {\n      returnValue[res.name] = returnValue[i];\n    }\n\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\n\nvar coder = new ABICoder();\nmodule.exports = coder;","map":{"version":3,"sources":["/Users/debbygregorio/Codes/decentralized-bank/dbank/node_modules/web3-eth-contract/node_modules/web3-eth-abi/src/index.js"],"names":["_","require","utils","EthersAbi","AbiCoder","ethersAbiCoder","type","value","match","isArray","isObject","constructor","name","toString","Result","ABICoder","prototype","encodeFunctionSignature","functionName","_jsonInterfaceMethodToString","sha3","slice","encodeEventSignature","encodeParameter","param","encodeParameters","types","params","encode","mapTypes","map","isBN","isBigNumber","self","mappedTypes","forEach","isSimplifiedStructFormat","structName","Object","keys","push","assign","mapStructNameAndType","components","mapStructToCoderFormat","indexOf","struct","key","encodeFunctionCall","jsonInterface","inputs","replace","decodeParameter","bytes","decodeParameters","outputs","length","Error","res","decode","returnValue","__length__","output","i","decodedValue","decodeLog","data","topics","_this","notIndexedInputs","indexedParams","topicCount","input","indexed","find","staticType","nonIndexedData","notIndexedParams","coder","module","exports"],"mappings":"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","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2018\n */\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\n\nvar EthersAbi = require('ethers/utils/abi-coder').AbiCoder;\nvar ethersAbiCoder = new EthersAbi(function (type, value) {\n    if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n        return value.toString();\n    }\n    return value;\n});\n\n// result method\nfunction Result() {\n}\n\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nvar ABICoder = function () {\n};\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n    if (_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName).slice(0, 10);\n};\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function (functionName) {\n    if (_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName);\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n *\n * @param {String|Object} type\n * @param {any} param\n *\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function (type, param) {\n    return this.encodeParameters([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n *\n * @param {Array<String|Object>} types\n * @param {Array<any>} params\n *\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function (types, params) {\n    return ethersAbiCoder.encode(\n        this.mapTypes(types),\n        params.map(function (param) {\n            if (utils.isBN(param) || utils.isBigNumber(param)) {\n                return param.toString(10);\n            }\n\n            return param;\n        })\n    );\n};\n\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\nABICoder.prototype.mapTypes = function (types) {\n    var self = this;\n    var mappedTypes = [];\n    types.forEach(function (type) {\n        if (self.isSimplifiedStructFormat(type)) {\n            var structName = Object.keys(type)[0];\n            mappedTypes.push(\n                Object.assign(\n                    self.mapStructNameAndType(structName),\n                    {\n                        components: self.mapStructToCoderFormat(type[structName])\n                    }\n                )\n            );\n\n            return;\n        }\n\n        mappedTypes.push(type);\n    });\n\n    return mappedTypes;\n};\n\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\nABICoder.prototype.isSimplifiedStructFormat = function (type) {\n    return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n};\n\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\nABICoder.prototype.mapStructNameAndType = function (structName) {\n    var type = 'tuple';\n\n    if (structName.indexOf('[]') > -1) {\n        type = 'tuple[]';\n        structName = structName.slice(0, -2);\n    }\n\n    return {type: type, name: structName};\n};\n\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\nABICoder.prototype.mapStructToCoderFormat = function (struct) {\n    var self = this;\n    var components = [];\n    Object.keys(struct).forEach(function (key) {\n        if (typeof struct[key] === 'object') {\n            components.push(\n                Object.assign(\n                    self.mapStructNameAndType(key),\n                    {\n                        components: self.mapStructToCoderFormat(struct[key])\n                    }\n                )\n            );\n\n            return;\n        }\n\n        components.push({\n            name: key,\n            type: struct[key]\n        });\n    });\n\n    return components;\n};\n\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n};\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function (type, bytes) {\n    return this.decodeParameters([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n    if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n        throw new Error(\n            'Returned values aren\\'t valid, did it run Out of Gas? ' +\n            'You might also see this error if you are not using the ' +\n            'correct ABI for the contract you are retrieving data from, ' +\n            'requesting data from a block number that does not exist, ' +\n            'or querying a node which is not fully synced.'\n        );\n    }\n\n    var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''));\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n\n    outputs.forEach(function (output, i) {\n        var decodedValue = res[returnValue.__length__];\n        decodedValue = (decodedValue === '0x') ? null : decodedValue;\n\n        returnValue[i] = decodedValue;\n\n        if (_.isObject(output) && output.name) {\n            returnValue[output.name] = decodedValue;\n        }\n\n        returnValue.__length__++;\n    });\n\n    return returnValue;\n};\n\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n    var _this = this;\n    topics = _.isArray(topics) ? topics : [topics];\n\n    data = data || '';\n\n    var notIndexedInputs = [];\n    var indexedParams = [];\n    var topicCount = 0;\n\n    // TODO check for anonymous logs?\n\n    inputs.forEach(function (input, i) {\n        if (input.indexed) {\n            indexedParams[i] = (['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n                return input.type.indexOf(staticType) !== -1;\n            })) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n            topicCount++;\n        } else {\n            notIndexedInputs[i] = input;\n        }\n    });\n\n\n    var nonIndexedData = data;\n    var notIndexedParams = (nonIndexedData) ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];\n\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n\n\n    inputs.forEach(function (res, i) {\n        returnValue[i] = (res.type === 'string') ? '' : null;\n\n        if (typeof notIndexedParams[i] !== 'undefined') {\n            returnValue[i] = notIndexedParams[i];\n        }\n        if (typeof indexedParams[i] !== 'undefined') {\n            returnValue[i] = indexedParams[i];\n        }\n\n        if (res.name) {\n            returnValue[res.name] = returnValue[i];\n        }\n\n        returnValue.__length__++;\n    });\n\n    return returnValue;\n};\n\nvar coder = new ABICoder();\n\nmodule.exports = coder;\n"]},"metadata":{},"sourceType":"script"}