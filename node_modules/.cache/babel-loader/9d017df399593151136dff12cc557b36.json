{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1 = require('./secp256k1v3-adapter');\n\nvar BN = require(\"bn.js\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\n\n\nexports.ecsign = function (msgHash, privateKey, chainId) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var recovery = sig.recovery;\n  var ret = {\n    r: sig.signature.slice(0, 32),\n    s: sig.signature.slice(32, 64),\n    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n  };\n  return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated\n\n  if (buf.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = buf[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new BN(r);\n  var sBN = new BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  var prefix = Buffer.from(\"\\x19Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n\nfunction calculateSigRecovery(v, chainId) {\n  return chainId ? v - (2 * chainId + 35) : v - 27;\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === 0 || recovery === 1;\n}","map":{"version":3,"mappings":";;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA;;AACA;;AACA;AAQA;;;;;AAGaC,iBAAS,UACpBC,OADoB,EAEpBC,UAFoB,EAGpBC,OAHoB,EAGJ;AAEhB,MAAMC,GAAG,GAAGN,SAAS,CAACO,IAAV,CAAeJ,OAAf,EAAwBC,UAAxB,CAAZ;AACA,MAAMI,QAAQ,GAAWF,GAAG,CAACE,QAA7B;AAEA,MAAMC,GAAG,GAAG;AACVC,KAAC,EAAEJ,GAAG,CAACK,SAAJ,CAAcC,KAAd,CAAoB,CAApB,EAAuB,EAAvB,CADO;AAEVC,KAAC,EAAEP,GAAG,CAACK,SAAJ,CAAcC,KAAd,CAAoB,EAApB,EAAwB,EAAxB,CAFO;AAGVE,KAAC,EAAET,OAAO,GAAGG,QAAQ,IAAIH,OAAO,GAAG,CAAV,GAAc,EAAlB,CAAX,GAAmCG,QAAQ,GAAG;AAH9C,GAAZ;AAMA,SAAOC,GAAP;AACD,CAfY;AAiBb;;;;;;AAIaP,oBAAY,UACvBC,OADuB,EAEvBW,CAFuB,EAGvBJ,CAHuB,EAIvBG,CAJuB,EAKvBR,OALuB,EAKP;AAEhB,MAAMM,SAAS,GAAGI,MAAM,CAACC,MAAP,CAAc,CAACC,kBAAUP,CAAV,EAAa,EAAb,CAAD,EAAmBO,kBAAUJ,CAAV,EAAa,EAAb,CAAnB,CAAd,EAAoD,EAApD,CAAlB;AACA,MAAML,QAAQ,GAAGU,oBAAoB,CAACJ,CAAD,EAAIT,OAAJ,CAArC;;AACA,MAAI,CAACc,kBAAkB,CAACX,QAAD,CAAvB,EAAmC;AACjC,UAAM,IAAIY,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,MAAMC,YAAY,GAAGrB,SAAS,CAACsB,OAAV,CAAkBnB,OAAlB,EAA2BQ,SAA3B,EAAsCH,QAAtC,CAArB;AACA,SAAOR,SAAS,CAACuB,gBAAV,CAA2BF,YAA3B,EAAyC,KAAzC,EAAgDT,KAAhD,CAAsD,CAAtD,CAAP;AACD,CAdY;AAgBb;;;;;;AAIaV,mBAAW,UAASY,CAAT,EAAoBJ,CAApB,EAA+BG,CAA/B,EAA0CR,OAA1C,EAA0D;AAChF,MAAMG,QAAQ,GAAGU,oBAAoB,CAACJ,CAAD,EAAIT,OAAJ,CAArC;;AACA,MAAI,CAACc,kBAAkB,CAACX,QAAD,CAAvB,EAAmC;AACjC,UAAM,IAAIY,KAAJ,CAAU,2BAAV,CAAN;AACD,GAJ+E,CAMhF;;;AACA,SAAOH,oBAAYF,MAAM,CAACC,MAAP,CAAc,CAACC,sBAAcP,CAAd,EAAiB,EAAjB,CAAD,EAAuBO,sBAAcJ,CAAd,EAAiB,EAAjB,CAAvB,EAA6CI,iBAASH,CAAT,CAA7C,CAAd,CAAZ,CAAP;AACD,CARY;AAUb;;;;;;AAIaZ,qBAAa,UAASI,GAAT,EAAoB;AAC5C,MAAMkB,GAAG,GAAWP,iBAASX,GAAT,CAApB,CAD4C,CAG5C;;AACA,MAAIkB,GAAG,CAACC,MAAJ,KAAe,EAAnB,EAAuB;AACrB,UAAM,IAAIL,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,MAAIN,CAAC,GAAGU,GAAG,CAAC,EAAD,CAAX,CAR4C,CAS5C;;AACA,MAAIV,CAAC,GAAG,EAAR,EAAY;AACVA,KAAC,IAAI,EAAL;AACD;;AAED,SAAO;AACLA,KAAC,EAAEA,CADE;AAELJ,KAAC,EAAEc,GAAG,CAACZ,KAAJ,CAAU,CAAV,EAAa,EAAb,CAFE;AAGLC,KAAC,EAAEW,GAAG,CAACZ,KAAJ,CAAU,EAAV,EAAc,EAAd;AAHE,GAAP;AAKD,CAnBY;AAqBb;;;;;;AAIaV,2BAAmB,UAC9BY,CAD8B,EAE9BJ,CAF8B,EAG9BG,CAH8B,EAI9Ba,gBAJ8B,EAK9BrB,OAL8B,EAKd;AADhB;AAAAqB;AAAgC;;AAGhC,MAAMC,iBAAiB,GAAG,IAAIC,EAAJ,CACxB,kEADwB,EAExB,EAFwB,CAA1B;AAIA,MAAMC,WAAW,GAAG,IAAID,EAAJ,CAAO,kEAAP,EAA2E,EAA3E,CAApB;;AAEA,MAAIlB,CAAC,CAACe,MAAF,KAAa,EAAb,IAAmBZ,CAAC,CAACY,MAAF,KAAa,EAApC,EAAwC;AACtC,WAAO,KAAP;AACD;;AAED,MAAI,CAACN,kBAAkB,CAACD,oBAAoB,CAACJ,CAAD,EAAIT,OAAJ,CAArB,CAAvB,EAA2D;AACzD,WAAO,KAAP;AACD;;AAED,MAAMyB,GAAG,GAAO,IAAIF,EAAJ,CAAOlB,CAAP,CAAhB;AACA,MAAMqB,GAAG,GAAO,IAAIH,EAAJ,CAAOf,CAAP,CAAhB;;AAEA,MAAIiB,GAAG,CAACE,MAAJ,MAAgBF,GAAG,CAACG,EAAJ,CAAOJ,WAAP,CAAhB,IAAuCE,GAAG,CAACC,MAAJ,EAAvC,IAAuDD,GAAG,CAACE,EAAJ,CAAOJ,WAAP,CAA3D,EAAgF;AAC9E,WAAO,KAAP;AACD;;AAED,MAAIH,gBAAgB,IAAIK,GAAG,CAACG,GAAJ,CAAQP,iBAAR,MAA+B,CAAvD,EAA0D;AACxD,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAjCY;AAmCb;;;;;;;;AAMazB,8BAAsB,UAASiC,OAAT,EAAwB;AACzD,MAAMC,MAAM,GAAGrB,MAAM,CAACsB,IAAP,CACb,mCAAmCF,OAAO,CAACV,MAAR,CAAea,QAAf,EADtB,EAEb,OAFa,CAAf;AAIA,SAAOC,cAAOxB,MAAM,CAACC,MAAP,CAAc,CAACoB,MAAD,EAASD,OAAT,CAAd,CAAP,CAAP;AACD,CANY;;AAQb,SAASjB,oBAAT,CAA8BJ,CAA9B,EAAyCT,OAAzC,EAAyD;AACvD,SAAOA,OAAO,GAAGS,CAAC,IAAI,IAAIT,OAAJ,GAAc,EAAlB,CAAJ,GAA4BS,CAAC,GAAG,EAA9C;AACD;;AAED,SAASK,kBAAT,CAA4BX,QAA5B,EAA4C;AAC1C,SAAOA,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,CAAtC;AACD","names":["secp256k1","require","exports","msgHash","privateKey","chainId","sig","sign","recovery","ret","r","signature","slice","s","v","Buffer","concat","bytes_1","calculateSigRecovery","isValidSigRecovery","Error","senderPubKey","recover","publicKeyConvert","buf","length","homesteadOrLater","SECP256K1_N_DIV_2","BN","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","prefix","from","toString","hash_1"],"sourceRoot":"","sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}