{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\n\nvar ethjsUtil = require('ethjs-util');\n\nvar BN = require(\"bn.js\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\n\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer|Array)\n */\n\n\nexports.setLengthLeft = function (msg, length, right) {\n  if (right === void 0) {\n    right = false;\n  }\n\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n\nexports.setLength = exports.setLengthLeft;\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @return (Buffer|Array)\n */\n\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\n\nexports.unpad = function (a) {\n  a = ethjsUtil.stripHexPrefix(a);\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n\nexports.stripZeros = exports.unpad;\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\n\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (ethjsUtil.isHexString(v)) {\n        v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n      } else {\n        throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n      }\n    } else if (typeof v === 'number') {\n      v = ethjsUtil.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\n\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\n\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\n\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};","map":{"version":3,"mappings":"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","names":["ethjsUtil","require","exports","bytes","Buffer","allocUnsafe","fill","msg","length","right","buf","copy","slice","a","stripHexPrefix","first","toString","v","isBuffer","Array","isArray","from","isHexString","padToEven","Error","intToBuffer","undefined","BN","isBN","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","ba","array","i","push"],"sourceRoot":"","sources":["../src/bytes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}